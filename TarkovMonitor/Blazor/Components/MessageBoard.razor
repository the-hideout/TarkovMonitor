@using Humanizer;
@using System.Diagnostics;
@using System.Threading
@inject MessageLog messageLog
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject LocalizationService LocalizationService
<MudStack Reverse="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Class="ma-3">
    @if (messageLog.Messages.Count == 0)
    {
        <MudAlert Severity="Severity.Info">@LocalizationService.GetString("ThereArentAnyMessagesYet")</MudAlert>
    }else{
        @foreach (MonitorMessage message in messageLog.Messages.ToList())
        {
            <div class="">
                <div class="d-block">
                    <MudPaper Class="align-center py-2 px-3 mud-theme-secondary" Elevation="3">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@GetTypeIcon(message.Type)" Title="@GetTypeTitle(message.Type)" Class="mr-2"/>
                            <span class="" @onclick="() => OpenURL(message.Url)" style="@GetMessageStyle(message.Url)">
                                @message.Message
                            </span>
                        </div>
                        <div class="d-flex align-center">
                            @foreach (MonitorMessageSelect select in message.Selects)
                            {

                                <MudSelect T="MonitorMessageSelectOption" Placeholder="@select.Placeholder" SelectedValuesChanged="@((e) => MessageSelectChanged(select, e) )">
                                    @foreach (MonitorMessageSelectOption option in select.Options)
                                    {
                                        <MudSelectItem Value="@option">@option.Text</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            @foreach (MonitorMessageButton button in message.Buttons)
                            {
                                <MudButton Variant="Variant.Filled" Color="@button.Color" StartIcon="@button.Icon" OnClick="@((e) => MessageButtonClick(button) )">@button.Text</MudButton>
                            }
                        </div>
                    </MudPaper>
                </div>
                <div class="d-flex justify-end mt-1">
                    <MudText Style="font-size: .8em">@message.Time.ToUniversalTime().Humanize()</MudText>
                </div>
            </div>
        }
    }
    
</MudStack>

        @code {
        // Force refresh every minute to update timestamps
    Timer? timer;  

    protected override void OnInitialized()
    {
        base.OnInitialized();

        messageLog.newMessage += MessageAdded;
        timer = new Timer(RefreshCallback, null, 1000, 1000);
    }

    private string GetTypeIcon(string type)
    {
        switch (type)
        {
            case "flea":
                return Icons.Material.Filled.Sell;
            case "debug":
                return Icons.Material.Filled.BugReport;
            case "exception":
                return Icons.Material.Filled.Warning;
            case "update":
                return Icons.Material.Filled.Update;
            case "quest":
                return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg enable-background=\"new 0 0 512.8 512.8\" version=\"1.1\" viewBox=\"0 0 512.8 512.8\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m101.7 199.7c6.6-11.1 13.6-22 19.8-33.4 2-3.6 3.1-8.3 2.8-12.3-0.6-9.1-2.4-18-3.8-28 9.6 2.5 18.1 5.1 26.9 6.9 2.7 0.6 6.4-0.1 8.5-1.6 16.4-12.1 34.4-20.9 53.9-26.9 2.5-0.8 5.4-3.4 6.4-5.8 12.5-29.3 24.6-58.7 36.9-88 1.1-2.6 2.2-5.1 4-9.3 18.4 44.2 36.3 87.1 53.9 129.3-13.5-2.9-26.6-7.2-40-8.5-53.7-5.2-97.3 14.2-130.1 56.9-5.4 7.1-11.1 12.3-19.5 15.1-6.1 2-11.9 4.8-17.9 7.3-0.6-0.7-1.2-1.2-1.8-1.7z\" fill=\"#818181\"/><path d=\"m1.2 256.9c41.7-17.3 81.9-34 123.3-51.3-0.9 2.7-1.3 4.3-1.9 5.9-26.2 67.8 1.8 143.4 65.7 178 3 1.6 5.7 4.9 7.3 8.1 3.5 7.1 6.2 14.6 10.1 24-8.8-3.6-15.9-6.5-22.9-9.6-4.2-1.9-8.9-3.7-12.2-6.8-10.5-9.9-22.2-10.1-34.9-5.9-3.4 1.1-7.1 1.4-11.5 2.3 1.8-9 3.7-17.2 5-25.5 0.4-2.6-0.3-6-1.9-8-16.3-20.4-27.4-43.2-33.4-68.7-0.6-2.3-3.3-5-5.6-6-26.1-11-52.3-21.8-78.5-32.7-2.3-1-4.7-2.1-8.6-3.8z\" fill=\"#818181\"/><path d=\"m512.8 257.1c-41.1 17.2-80.8 33.7-120.7 50.3 1.8-10.5 4.2-20.3 5-30.3 4.3-54.7-16.3-98.2-60.3-130.5-6-4.4-10.2-9-12.6-15.8-2.3-6.6-5.3-13.1-6.5-21.3 10.3 5.9 20.5 11.8 31 17.5 2.6 1.4 5.9 2.4 8.6 2.1 12.2-1.4 24.3-3.3 37.6-5.3-3 11.3-6 21.6-8.3 32.1-0.6 2.9 0.4 6.6 1.7 9.4 7.7 15.4 15.7 30.7 23.9 45.9 1.3 2.5 3.6 5.3 6.1 6.3 28.3 12.1 56.8 23.8 85.3 35.7 2.6 1 5.1 2.1 9.2 3.9z\" fill=\"#818181\"/><path d=\"m398.3 396.8c-11.1-2.3-21.2-4.6-31.3-6.2-2.6-0.4-6.1 0.3-8.1 1.9-18.2 14.2-38.4 24.5-60.6 30.8-2.4 0.7-5.1 3.2-6.1 5.5-10.7 25.1-21.1 50.4-31.6 75.6-0.9 2.3-2 4.5-3.7 8.4-16-38.5-31.5-75.6-47.2-113.1 10.7 2 20.3 4.4 30.1 5.4 60 6 113.4-22.8 142.3-75.8 1.8-3.4 5.6-6.3 9.1-8.1 6.6-3.4 13.7-5.9 22.3-9.4-2.3 6.2-3.9 10.9-5.8 15.6-1.5 3.7-2.6 7.9-5.1 10.8-13 15.2-11.8 31.9-6.2 49.3 1 2.5 1.2 5.3 1.9 9.3z\" fill=\"#818181\"/><path d=\"m254.2 130.3c73.9 0.3 132.3 59.7 132 134.1-0.3 72-60 130.8-132.4 130.6-73.4-0.2-132.2-59.7-131.9-133.3 0.3-72.4 60.1-131.8 132.3-131.4zm-101.2 212.8c2.3 2.8 4.5 5.8 7.1 8.4 31 31.5 68.6 45.1 112.4 39.2 34.3-4.6 62.3-21.1 83.6-48.7 20.3-25.3 29-54.4 27.2-86.6-5.2-96.2-110.4-153-193.8-104.8-68.5 39.6-86.5 134.4-36.5 192.5z\" fill=\"#818181\"/><path d=\"m153 343.1c9.4 1.7 12.1-2.4 11.3-11.5-0.5-6-3.1-13.5 5.5-17.1 0.9-0.4 1.1-3.3 1.1-5 0.1-11.2-0.1-22.3 0.2-33.5 0-2 2-5.7 2.3-5.6 4.9 1.3 7.4-11.1 13.4-2.4 0.2 0.2 0.6 0.5 0.8 0.5 11.8-0.2 9.3 8.4 9.4 15.3 0.1 10 0 19.9 0 29.9 1 0 2 0.1 3 0.1 1-13.6 1.9-27.2 3.1-40.8 0.2-1.9 1.4-4.8 2.8-5.2 5.2-1.7 5.5-5.3 5.4-9.8-0.1-22-0.2-44 0-66 0.1-6.6 0.9-13.2 2-19.7 0.2-1.3 2.8-2.8 4.5-3.1 4.2-0.7 8.4-0.7 13-1 2.8 9.4 5.9 19.5 8.8 29.7 0.6 2 0.6 4.3 0.6 6.4 0 21 0 42 0.1 63 0 1.7 1.1 3.5 1.7 5.2 0.8-1.8 2.1-3.5 2.2-5.3 0.9-13.4 1.5-26.8 2.2-40.2 0.3-4.6 1.2-8.4 7.5-8.2 6.2 0.3 5.3 4.7 6.1 8.4 2.3 10.1 4.7 20.3 7.2 31.1 0.3-2.2 0.7-4 0.7-5.8 0.1-11.3-0.1-22.7 0.2-34 0.1-2.1 2.3-4 3.4-6.1 1-1.9 2.1-3.9 2.4-6 0.7-5 3.5-5.9 7.3-3.7 4.8 2.7 9.6 5.7 13.9 9.1 1.4 1.1 1.7 4.2 1.7 6.3 0.1 38.3 0 76.6 0.1 115 0 2.1 1.1 4.1 1.7 6.2 0.7-2.1 2.1-4.2 2.1-6.3 0.2-22.3 0.1-44.6 0.1-68.2 6.8 0 13-0.3 19.2 0.2 1.7 0.1 4.4 3 4.4 4.7 0.4 21.3 0.2 42.6 0.5 63.9 0 2 2 4 3.1 6.1 0.9-2 2.6-4 2.7-6 0.2-13.3-0.1-26.7 0.4-40 0.1-2 3-5.4 5.1-5.7 19.8-3.1 19.8-3 19.8 16.9v37c-21.2 27.6-49.3 44.1-83.6 48.7-43.8 5.9-81.4-7.7-112.4-39.2-2.5-2.5-4.7-5.5-7-8.3z\" fill=\"#B4B4B4\"/></svg>";
            default:
                return Icons.Material.Filled.Info;
        }
    }

    private string GetTypeTitle(string type)
    {
        switch (type)
        {
                    case "flea":
            return LocalizationService.GetString("FleaMarketSale");
                    case "debug":
            return LocalizationService.GetString("Debug");
                    case "exception":
            return LocalizationService.GetString("Error");
                    case "update":
            return LocalizationService.GetString("Update");
                    case "quest":
            return LocalizationService.GetString("Quest");
            default:
                return "Info";
        }
    }

    private string GetMessageStyle(string url)
    {
        if (url.Length == 0) return ""; 
        return "cursor: pointer;";
    }

    private void OpenURL(string url)
    {
        if (url.Length == 0) return;
        var psi = new ProcessStartInfo
		{
            FileName = url,
			UseShellExecute = true,
		};
        Process.Start(psi);
    }

    private void RefreshCallback(object? state)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void MessageAdded(object? sender, NewLogMessageArgs e)
    {
        InvokeAsync(() => StateHasChanged());
        var severity = Severity.Info;
        if (e.Message.Type == "exception")
        {
            severity = Severity.Error;
        }
        if (e.Message.Type == "warning")
        {
            severity = Severity.Warning;
        }
        if (e.Message.Type == "update")
        {
            severity = Severity.Success;
        }
        Snackbar.Add(e.Message.Message, severity, config =>
        {
            config.Onclick = snackbar =>
            {
                NavManager.NavigateTo("/");
                return Task.CompletedTask;
            };
        });
    }

    private async void MessageButtonClick(MonitorMessageButton button)
    {
        try
        {
            if (button.Confirm == null)
            {
                button.OnClick?.Invoke();
                return;
            }
            bool? result = await DialogService.ShowMessageBox(
                button.Confirm.Title,
                (MarkupString) button.Confirm.Message,
                yesText: button.Confirm.YesText, 
                cancelText: button.Confirm.CancelText
            );
            if (result != null)
            {
                button.OnClick?.Invoke();
            }
        }
        catch (Exception ex)
        {
            messageLog.AddMessage($"Error in message button: ${ex.Message} {ex.StackTrace}", "exception");
        }
    }

    private async void MessageSelectChanged(MonitorMessageSelect select, IEnumerable<MonitorMessageSelectOption> selected)
    {
        try
        {
            select.ChangeSelection(selected.First());
        }
        catch (Exception ex)
        {
            messageLog.AddMessage($"Error in message select: ${ex.Message} {ex.StackTrace}", "exception");
        }
    }
}
