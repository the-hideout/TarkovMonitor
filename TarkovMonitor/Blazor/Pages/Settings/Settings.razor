@page "/settings"
@using System.Diagnostics
@using NAudio.Wave
@using Microsoft.WindowsAPICodePack.Dialogs;
@inject GameWatcher eft
@inject MessageLog messageLog
@inject IDialogService DialogService
@layout AppLayout
@implements IDisposable

<MudGrid Class="pa-0" Spacing="0">
    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.Notifications" Class="mr-2" />Notifications</MudText>
            <div>
                <MudSelect @bind-Value="@AudioOutputDeviceSelect" T="int" Label="Notifications playback device" AnchorOrigin="Origin.BottomCenter" xs="3">
                    @foreach (var device in PlaybackDevices)
                    {
                        <MudSelectItem T="int" Value="@device.Key">@device.Value</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div>
                <MudSwitch @bind-Value="@RaidStartSwitch" Label="Raid Starting Audio Notification" Color="Color.Info" Class="d-inline-flex" xs="3" />
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" @onclick="PlayRaidStart" Class="d-inline-flex mt-1" xs="3"><MudIcon Icon="@Icons.Material.Filled.Audiotrack" Size="Size.Small" /></MudButton>
            </div>
            <div>
                <MudSwitch @bind-Value="@MatchFoundSwitch" Label="Match Found Audio Notification" Color="Color.Info" Class="d-inline-flex" xs="3" />
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" @onclick="PlayMatchFound" Class="d-inline-flex" xs="3"><MudIcon Icon="@Icons.Material.Filled.Audiotrack" Size="Size.Small" /></MudButton>
            </div>
            <div>
                <MudSwitch @bind-Value="@RestartTaskSwitch" Label="Restart Tasks Audio Reminder" Color="Color.Info" Class="d-inline-flex" xs="3" />
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" @onclick="PlayRestartTask" Class="d-inline-flex" xs="3"><MudIcon Icon="@Icons.Material.Filled.Audiotrack" Size="Size.Small" /></MudButton>
            </div>
            <div>
                <MudSwitch @bind-Value="@RunthroughSwitch" Label="Runthrough Period Audio Reminder" Color="Color.Info" Class="d-inline-flex" xs="3" />
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" @onclick="PlayRunthrough" Class="d-inline-flex" xs="3"><MudIcon Icon="@Icons.Material.Filled.Audiotrack" Size="Size.Small" /></MudButton>
            </div>
            <div>
                <MudSwitch @bind-Value="@AirFilterSwitch" Label="Air Filter Audio Reminders" Color="Color.Info" Class="d-inline-flex" xs="3" />
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" @onclick="PlayAirFilters" Class="d-inline-flex" xs="3"><MudIcon Icon="@Icons.Material.Filled.Audiotrack" Size="Size.Small" /></MudButton>
            </div>
            <div>
                <MudSwitch @bind-Value="@QuestItemsSwitch" Label="Quest Item Reminder Audio Notification" Color="Color.Info" Class="d-inline-flex" xs="3" />
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" @onclick="PlayQuestItems" Class="d-inline-flex mt-1" xs="3"><MudIcon Icon="@Icons.Material.Filled.Audiotrack" Size="Size.Small" /></MudButton>
            </div>
            <div>
                <MudSwitch @bind-Value="@ScavCooldownSwitch" Label="Scav Cooldown Reminders" Color="Color.Info" Class="d-inline-flex" xs="3" />
                <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info" @onclick="PlayScavAvailable" Class="d-inline-flex" xs="3"><MudIcon Icon="@Icons.Material.Filled.Audiotrack" Size="Size.Small" /></MudButton>
                <MudSelect @bind-Value="@ScavKarmaSelect" T="int" Label="Scav Karma" AnchorOrigin="Origin.BottomCenter" Class="d-inline-flex" xs="3">
                    @if (TraderFence != null)
                    {
                        @foreach (TarkovDev.TraderReputationLevel lvl in TraderFence.reputationLevels)
                        {
                            <MudSelectItem Value="@lvl.minimumReputation" />
                        }
                    }
                </MudSelect>
            </div>
            <div>
                <MudTextField @bind-Value="@RunthroughTime" Label="Runthrough Time (HH:MM:SS)" Class="d-inline-flex" sx="3" />
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.Window" Class="mr-2"/>Window Behavior</MudText>
            <div>
                <MudSwitch @bind-Value="@MinimizeAtStartupSwitch" Label="Start Tarkov Monitor Minimized" Color="Color.Info" />
            </div>
            <div>
                <MudSwitch @bind-Value="@MinimizeToTraySwitch" Label="Minimize to System Tray" Color="Color.Info" />
            </div>
            <div>
                <MudSwitch @bind-Value="@StayOnTopSwitch" Label="Stay on Top" Color="Color.Info" />
            </div>
            <div>
                <MudSwitch @bind-Value="@SkipSplashSwitch" Label="Skip Tarkov.dev Splash Logo" Color="Color.Info" />
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.Handshake" Class="mr-2"/>Data Collection</MudText>
            <MudSwitch @bind-Value="@SubmitQueueTimeSwitch" Label="Submit Queue Time Data" Color="Color.Info" />
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@trackerIcon" Class="mr-2"/>TarkovTracker</MudText>
            <MudButton @onclick="OpenTrackerSettings" Variant="Variant.Text" Color="Color.Info">Get A Token</MudButton>
            <MudButton @onclick="TestToken" @bind-Disabled="@TestTokenButtonDisabled" Variant="Variant.Text" Color="Color.Info">Test Token</MudButton>
            <MudTextField @bind-Value="@TarkovTrackerToken" Immediate="true" Label="API Token" InputType="@PasswordInput" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TokenShowClick"></MudTextField>
            <MudSelect @bind-Value="@TarkovTrackerDomain" T="string" Label="Tarkov Tracker Service" ShrinkLabel="true" HelperText="Tarkov Tracker service to use" AnchorOrigin="Origin.BottomCenter" xs="3">
                @foreach (var pair in TarkovTracker.Domains)
                {
                    <MudSelectItem T="string" Value="@pair.Key">@pair.Value</MudSelectItem>
                }
            </MudSelect>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.SettingsRemote" Class="mr-2" /><MudButton @onclick="VisitWebsite" Variant="Variant.Text">Tarkov.dev Website Remote</MudButton></MudText>
            <MudTextField @bind-Value="@RemoteID" MaxLength="4" Label="Remote ID" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentPaste" OnAdornmentClick="PasteRemoteClick"></MudTextField>
            <div>
                <MudSwitch @bind-Value="@NavigateMapSwitch" Label="Switch to Tarkov.dev map on raid load" Color="Color.Info" />
            </div>
            <div>
                <MudSwitch @bind-Value="@NavigateMapOnPositionUpdateSwitch" Label="Switch to Tarkov.dev map on position update (via screenshot)" Color="Color.Info" />
            </div>
            <div>
                <MudSwitch @bind-Value="@AutomaticallyDeleteScreenshotsAfterRaid" Label="Automatically delete taken screenshots after raid" Color="Color.Info" />
            </div>
            <div>
                <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.Folder" Class="mr-2" />Screenshot Folder</MudText>
                <MudTextField T="string" @bind-Value="@CustomScreenShotFolder" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FolderOpen" OnAdornmentClick="CustomScreenShotFolderClick"></MudTextField>
                @if (Properties.Settings.Default.customScreenShotPath != null && Properties.Settings.Default.customScreenShotPath != "")
                {
                    <div>
                        <MudButton @onclick="SetDefaultScreenShotFolder" VaLogFolderriant="Variant.Text">Reset to Default</MudButton>
                    </div>
                }
            </div>
            <MudSelect @bind-Value="@MapOverrideSelect" T="string" Label="Offline Map" ShrinkLabel="true" HelperText="Map to use for offline raids" AnchorOrigin="Origin.BottomCenter" xs="3">
                <MudSelectItem T="string" Value="@string.Empty">None</MudSelectItem>
                @foreach (var map in TarkovDev.Maps)
                {
                    <MudSelectItem T="string" Value="@map.nameId">@map.name</MudSelectItem>
                }
            </MudSelect>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.Folder" Class="mr-2" />Logs Folder</MudText><MudText>Don't change this unless you really know what you're doing.</MudText>
            <MudTextField @bind-Value="@CustomLogsFolder" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.FolderOpen" OnAdornmentClick="CustomLogsFolderClick"></MudTextField>
            @if (Properties.Settings.Default.customLogsPath != null && Properties.Settings.Default.customLogsPath != "")
            {
                <div>
                    <MudButton @onclick="SetDefaultLogFolder" Variant="Variant.Text">Reset to Default</MudButton>
                </div>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.SettingsSuggest" Class="mr-2" />Initial Setup</MudText>
            <div>
                <MudButton @onclick="ReadPastLogs" Variant="Variant.Text" Color="Color.Info">Read Past Logs</MudButton>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    [CascadingParameter(Name="AppLayout")]
    public AppLayout AppLayout { get; set; }

    private Dictionary<int, string> PlaybackDevices;
    private TarkovDev.Trader? TraderFence
    {
        get
        {
            return TarkovDev.Traders.Find(t => t.normalizedName == "fence");
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        PlaybackDevices = Sound.GetPlaybackDevices();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            AppLayout.SetTitle("Settings");
        }
    }

    public void Dispose()
    {
    }

    public void PlayRaidStart()
    {
        Sound.Play("raid_starting");
    }

    public void PlayMatchFound()
    {
        Sound.Play("match_found");
    }

    public void PlayRestartTask()
    {
        Sound.Play("restart_failed_tasks");
    }

    public void PlayRunthrough()
    {
        Sound.Play("runthrough_over");
    }

    public async void PlayAirFilters()
    {
        await Sound.Play("air_filter_on");
        Sound.Play("air_filter_off");
    }

    public void PlayScavAvailable()
    {
        Sound.Play("scav_available");
    }

    public void PlayQuestItems()
    {
        Sound.Play("quest_items");
    }

    public DialogOptions diagOptions = new DialogOptions { CloseOnEscapeKey = true };

    public bool RaidStartSwitch { 
        get 
        {
            return Properties.Settings.Default.raidStartAlert;
        }
        set
        {
            Properties.Settings.Default.raidStartAlert = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool MatchFoundSwitch { 
        get 
        {
            return Properties.Settings.Default.matchFoundAlert;
        }
        set
        {
            Properties.Settings.Default.matchFoundAlert = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool RestartTaskSwitch
    {
        get
        {
            return Properties.Settings.Default.restartTaskAlert;
        }
        set
        {
            Properties.Settings.Default.restartTaskAlert = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool RunthroughSwitch
    {
        get
        {
            return Properties.Settings.Default.runthroughAlert;
        }
        set
        {
            Properties.Settings.Default.runthroughAlert = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool AirFilterSwitch
    {
        get
        {
            return Properties.Settings.Default.airFilterAlert;
        }
        set
        {
            Properties.Settings.Default.airFilterAlert = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool ScavCooldownSwitch
    {
        get
        {
            return Properties.Settings.Default.scavCooldownAlert;
        }
        set
        {
            Properties.Settings.Default.scavCooldownAlert = value;
            Properties.Settings.Default.Save();
        }
    }

    public int ScavKarmaSelect
    {
        get
        {
            return Properties.Settings.Default.scavKarma;
        }
        set
        {
            Properties.Settings.Default.scavKarma = value;
            Properties.Settings.Default.Save();
        }
    }

    public int AudioOutputDeviceSelect
    {
        get
        {
            return Properties.Settings.Default.notificationsDevice;
        }
        set
        {
            Properties.Settings.Default.notificationsDevice = value;
            Properties.Settings.Default.Save();
        }
    }

    public string MapOverrideSelect
    {
        get
        {
            return Properties.Settings.Default.customMap;
        }
        set
        {
            Properties.Settings.Default.customMap = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool MinimizeAtStartupSwitch
    {
        get
        {
            return Properties.Settings.Default.minimizeAtStartup;
        }
        set
        {
            Properties.Settings.Default.minimizeAtStartup = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool StayOnTopSwitch
    {
        get
        {
            return Properties.Settings.Default.stayOnTop;
        }
        set
        {
            Properties.Settings.Default.stayOnTop = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool MinimizeToTraySwitch
    {
        get
        {
            return Properties.Settings.Default.minimizeToTray;
        }
        set
        {
            Properties.Settings.Default.minimizeToTray = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool SkipSplashSwitch
    {
        get
        {
            return Properties.Settings.Default.skipSplash;
        }
        set
        {
            Properties.Settings.Default.skipSplash = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool SubmitQueueTimeSwitch { 
        get 
        {
            return Properties.Settings.Default.submitQueueTime;
        }
        set
        {
            Properties.Settings.Default.submitQueueTime = value;
            Properties.Settings.Default.Save();
        }
    }

    //public bool TestTokenButtonDisabled { get; set; }
    public bool TestTokenButtonDisabled
    {
        get
        {
            return TarkovTracker.GetToken(eft.CurrentProfile.Id).Length != 22;
        }
        set
        {

        }
    }

    public TimeSpan RunthroughTime
    {
        get
        {
            return Properties.Settings.Default.runthroughTime;
        }
        set
        {
            Properties.Settings.Default.runthroughTime = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool QuestItemsSwitch
    {
        get
        {
            return Properties.Settings.Default.questItemsAlert;
        }
        set
        {
            Properties.Settings.Default.questItemsAlert = value;
            Properties.Settings.Default.Save();
        }
    }

    void ReadPastLogs()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        DialogService.Show<RawLogs.ForceReadDialog>("Read Past Log Files", options);
    }

    private string trackerIcon = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg enable-background=\"new 0 0 512.8 512.8\" version=\"1.1\" viewBox=\"0 0 512.8 512.8\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m101.7 199.7c6.6-11.1 13.6-22 19.8-33.4 2-3.6 3.1-8.3 2.8-12.3-0.6-9.1-2.4-18-3.8-28 9.6 2.5 18.1 5.1 26.9 6.9 2.7 0.6 6.4-0.1 8.5-1.6 16.4-12.1 34.4-20.9 53.9-26.9 2.5-0.8 5.4-3.4 6.4-5.8 12.5-29.3 24.6-58.7 36.9-88 1.1-2.6 2.2-5.1 4-9.3 18.4 44.2 36.3 87.1 53.9 129.3-13.5-2.9-26.6-7.2-40-8.5-53.7-5.2-97.3 14.2-130.1 56.9-5.4 7.1-11.1 12.3-19.5 15.1-6.1 2-11.9 4.8-17.9 7.3-0.6-0.7-1.2-1.2-1.8-1.7z\" fill=\"#818181\"/><path d=\"m1.2 256.9c41.7-17.3 81.9-34 123.3-51.3-0.9 2.7-1.3 4.3-1.9 5.9-26.2 67.8 1.8 143.4 65.7 178 3 1.6 5.7 4.9 7.3 8.1 3.5 7.1 6.2 14.6 10.1 24-8.8-3.6-15.9-6.5-22.9-9.6-4.2-1.9-8.9-3.7-12.2-6.8-10.5-9.9-22.2-10.1-34.9-5.9-3.4 1.1-7.1 1.4-11.5 2.3 1.8-9 3.7-17.2 5-25.5 0.4-2.6-0.3-6-1.9-8-16.3-20.4-27.4-43.2-33.4-68.7-0.6-2.3-3.3-5-5.6-6-26.1-11-52.3-21.8-78.5-32.7-2.3-1-4.7-2.1-8.6-3.8z\" fill=\"#818181\"/><path d=\"m512.8 257.1c-41.1 17.2-80.8 33.7-120.7 50.3 1.8-10.5 4.2-20.3 5-30.3 4.3-54.7-16.3-98.2-60.3-130.5-6-4.4-10.2-9-12.6-15.8-2.3-6.6-5.3-13.1-6.5-21.3 10.3 5.9 20.5 11.8 31 17.5 2.6 1.4 5.9 2.4 8.6 2.1 12.2-1.4 24.3-3.3 37.6-5.3-3 11.3-6 21.6-8.3 32.1-0.6 2.9 0.4 6.6 1.7 9.4 7.7 15.4 15.7 30.7 23.9 45.9 1.3 2.5 3.6 5.3 6.1 6.3 28.3 12.1 56.8 23.8 85.3 35.7 2.6 1 5.1 2.1 9.2 3.9z\" fill=\"#818181\"/><path d=\"m398.3 396.8c-11.1-2.3-21.2-4.6-31.3-6.2-2.6-0.4-6.1 0.3-8.1 1.9-18.2 14.2-38.4 24.5-60.6 30.8-2.4 0.7-5.1 3.2-6.1 5.5-10.7 25.1-21.1 50.4-31.6 75.6-0.9 2.3-2 4.5-3.7 8.4-16-38.5-31.5-75.6-47.2-113.1 10.7 2 20.3 4.4 30.1 5.4 60 6 113.4-22.8 142.3-75.8 1.8-3.4 5.6-6.3 9.1-8.1 6.6-3.4 13.7-5.9 22.3-9.4-2.3 6.2-3.9 10.9-5.8 15.6-1.5 3.7-2.6 7.9-5.1 10.8-13 15.2-11.8 31.9-6.2 49.3 1 2.5 1.2 5.3 1.9 9.3z\" fill=\"#818181\"/><path d=\"m254.2 130.3c73.9 0.3 132.3 59.7 132 134.1-0.3 72-60 130.8-132.4 130.6-73.4-0.2-132.2-59.7-131.9-133.3 0.3-72.4 60.1-131.8 132.3-131.4zm-101.2 212.8c2.3 2.8 4.5 5.8 7.1 8.4 31 31.5 68.6 45.1 112.4 39.2 34.3-4.6 62.3-21.1 83.6-48.7 20.3-25.3 29-54.4 27.2-86.6-5.2-96.2-110.4-153-193.8-104.8-68.5 39.6-86.5 134.4-36.5 192.5z\" fill=\"#818181\"/><path d=\"m153 343.1c9.4 1.7 12.1-2.4 11.3-11.5-0.5-6-3.1-13.5 5.5-17.1 0.9-0.4 1.1-3.3 1.1-5 0.1-11.2-0.1-22.3 0.2-33.5 0-2 2-5.7 2.3-5.6 4.9 1.3 7.4-11.1 13.4-2.4 0.2 0.2 0.6 0.5 0.8 0.5 11.8-0.2 9.3 8.4 9.4 15.3 0.1 10 0 19.9 0 29.9 1 0 2 0.1 3 0.1 1-13.6 1.9-27.2 3.1-40.8 0.2-1.9 1.4-4.8 2.8-5.2 5.2-1.7 5.5-5.3 5.4-9.8-0.1-22-0.2-44 0-66 0.1-6.6 0.9-13.2 2-19.7 0.2-1.3 2.8-2.8 4.5-3.1 4.2-0.7 8.4-0.7 13-1 2.8 9.4 5.9 19.5 8.8 29.7 0.6 2 0.6 4.3 0.6 6.4 0 21 0 42 0.1 63 0 1.7 1.1 3.5 1.7 5.2 0.8-1.8 2.1-3.5 2.2-5.3 0.9-13.4 1.5-26.8 2.2-40.2 0.3-4.6 1.2-8.4 7.5-8.2 6.2 0.3 5.3 4.7 6.1 8.4 2.3 10.1 4.7 20.3 7.2 31.1 0.3-2.2 0.7-4 0.7-5.8 0.1-11.3-0.1-22.7 0.2-34 0.1-2.1 2.3-4 3.4-6.1 1-1.9 2.1-3.9 2.4-6 0.7-5 3.5-5.9 7.3-3.7 4.8 2.7 9.6 5.7 13.9 9.1 1.4 1.1 1.7 4.2 1.7 6.3 0.1 38.3 0 76.6 0.1 115 0 2.1 1.1 4.1 1.7 6.2 0.7-2.1 2.1-4.2 2.1-6.3 0.2-22.3 0.1-44.6 0.1-68.2 6.8 0 13-0.3 19.2 0.2 1.7 0.1 4.4 3 4.4 4.7 0.4 21.3 0.2 42.6 0.5 63.9 0 2 2 4 3.1 6.1 0.9-2 2.6-4 2.7-6 0.2-13.3-0.1-26.7 0.4-40 0.1-2 3-5.4 5.1-5.7 19.8-3.1 19.8-3 19.8 16.9v37c-21.2 27.6-49.3 44.1-83.6 48.7-43.8 5.9-81.4-7.7-112.4-39.2-2.5-2.5-4.7-5.5-7-8.3z\" fill=\"#B4B4B4\"/></svg>";
    bool tokenShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    public string TarkovTrackerToken
    {
        get
        {
            return TarkovTracker.GetToken(eft.CurrentProfile.Id);
        }
        set
        {
            TarkovTracker.SetToken(eft.CurrentProfile.Id, value);
        }
    }
    public string TarkovTrackerDomain
    {
        get
        {
            return Properties.Settings.Default.tarkovTrackerDomain;
        }
        set
        {
            if (Properties.Settings.Default.tarkovTrackerDomain == value)
            {
                return;
            }
            Properties.Settings.Default.tarkovTrackerDomain = value;
            TarkovTrackerToken = "";
            TarkovTracker.InitAPI();
            Properties.Settings.Default.Save();
        }
    }

    void TokenShowClick()
    {
        if (tokenShow)
        {
            tokenShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            tokenShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async void TestToken()
    {
        if (TarkovTrackerToken.Length != 22)
        {
            messageLog.AddMessage("You must enter a valid TarkovTracker API token.", "warning");
            return;
        } else {
            try
            {
                var tokenResponse = await TarkovTracker.TestToken(TarkovTrackerToken);
                if (!tokenResponse.permissions.Contains("WP"))
                {
                    messageLog.AddMessage("You do not have write permissions with this token.", "warning");
                    return;
                }
            }
            catch (Exception ex)
            {
                messageLog.AddMessage(ex.Message, "exception");

            }
        }

    }

    private void OpenTrackerSettings() {
        OpenURL($"https://{TarkovTrackerDomain}/settings/");
    }

    private void OpenURL(string url)
    {
        var psi = new ProcessStartInfo
		{
			FileName = url,
			UseShellExecute = true,
		};
        Process.Start(psi);
    }

    private string GetCustomSoundsPath()
    {
        var localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        return Path.Combine(localAppData, "TarkovMonitor", "sounds");
    }

    private string GetCustomSoundPath(string key)
    {
        return Path.Combine(GetCustomSoundsPath(), $"{key}.mp3");
    }

    private bool CustomSoundExists(string key)
    {
        var filepath = GetCustomSoundPath(key);
        if (File.Exists(filepath))
        {
            return true;
        }
        return false;
    }

    void VisitWebsite()
    {
        OpenURL("https://tarkov.dev");
    }
    void PasteRemoteClick()
    {
        RemoteID = Clipboard.GetText();
    }
    public string RemoteID
    {
        get
        {
            return Properties.Settings.Default.remoteId;
        }
        set
        {
            Properties.Settings.Default.remoteId = value;
            Properties.Settings.Default.Save();
        }
    }
    public bool NavigateMapSwitch
    {
        get
        {
            return Properties.Settings.Default.autoNavigateMap;
        }
        set
        {
            Properties.Settings.Default.autoNavigateMap = value;
            Properties.Settings.Default.Save();
        }
    }
    public bool NavigateMapOnPositionUpdateSwitch
    {
        get
        {
            return Properties.Settings.Default.navigateMapOnPositionUpdate;
        }
        set
        {
            Properties.Settings.Default.navigateMapOnPositionUpdate = value;
            Properties.Settings.Default.Save();
        }
    }

    public bool AutomaticallyDeleteScreenshotsAfterRaid
    {
        get
        {
            return Properties.Settings.Default.automaticallyDeleteScreenshotsAfterRaid;
        }
        set
        {
            Properties.Settings.Default.automaticallyDeleteScreenshotsAfterRaid = value;
            Properties.Settings.Default.Save();
        }
    }

    public string CustomLogsFolder
    {
        get
        {
            if (Properties.Settings.Default.customLogsPath != null && Properties.Settings.Default.customLogsPath != "")
            {
                return Properties.Settings.Default.customLogsPath;
            }
            try
            {
                return GameWatcher.GetDefaultLogsFolder();
            }
            catch (Exception ex)
            {
                messageLog.AddMessage($"Error getting default logs folder: {ex.Message}", "exception");
            }
            return "";
        }
        set
        {
            Properties.Settings.Default.customLogsPath = value;
            Properties.Settings.Default.Save();
        }
    }

    public string CustomScreenShotFolder
    {
        get
        {
            if (Properties.Settings.Default.customScreenShotPath != null && Properties.Settings.Default.customScreenShotPath != "")
                return Properties.Settings.Default.customScreenShotPath;
            try
            {
                return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Escape From Tarkov", "Screenshots");
            }
            catch (Exception ex)
            {
                messageLog.AddMessage($"Error getting default screenshot folder: {ex.Message}", "exception");
            }

            return "";
        }
        set
        {
            Properties.Settings.Default.customScreenShotPath = value;
            Properties.Settings.Default.Save();
        }
    }

    void CustomLogsFolderClick()
    {
        using CommonOpenFileDialog dialog = new CommonOpenFileDialog();
        dialog.InitialDirectory = CustomLogsFolder;
        dialog.IsFolderPicker = true;
        if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
        {
            CustomLogsFolder = dialog.FileName;
        }
    }

    void CustomScreenShotFolderClick()
    {
        var dialog = new CommonOpenFileDialog();
        dialog.InitialDirectory = CustomScreenShotFolder;
        dialog.IsFolderPicker = true;
        if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            CustomScreenShotFolder = dialog.FileName;
    }

    void SetDefaultLogFolder() {
        CustomLogsFolder = "";
    }

    void SetDefaultScreenShotFolder()
        => CustomScreenShotFolder = "";
}
