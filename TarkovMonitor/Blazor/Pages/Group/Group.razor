@page "/group"
@using System.Diagnostics
@using TarkovMonitor.GroupLoadout
@inject GameWatcher eft
@inject GroupManager groupManager
@inject LocalizationService LocalizationService
@layout AppLayout
@implements IDisposable

<MudGrid Class="pa-3" Spacing="0">
	<MudItem xs="12">
        @if (groupManager.GroupMembers.Count == 0)
        {
            <MudAlert Severity="Severity.Info">@LocalizationService.GetString("YouArentInAGroupOrHavePartyMembersYet")</MudAlert>
        }else{
            <MudTabs Elevation="3" Rounded="true" Centered="true" PanelClass="pa-3">
                @foreach (KeyValuePair<string, GroupMember> member in groupManager.GroupMembers)
                {
                    <MudTabPanel Text="@member.Key" Icon="@Icons.Material.Filled.Person">
                        <div class="d-flex justify-space-between align-center">
                            <div class="d-flex align-center"><LevelIcon Level="@member.Value.Loadout.Info.Level" Width="48" /><MudText Typo="Typo.h4">@member.Value.Loadout.Info.Level</MudText></div>
                            <div><MudText Typo="Typo.h4">@member.Value.Loadout.Info.Nickname</MudText></div>
                            <div><MudText Typo="Typo.h4">@member.Value.Loadout.Info.Side.ToUpper()</MudText></div>
                        </div>
                        <div>
                            @foreach (LoadoutItem item in parentItems(member.Value.Loadout.Equipment.Items))
                            {

                                <LoadoutRecursor Loadout="@member.Value.Loadout.Equipment.Items" Item="item" />
                            }
                        </div>
                    </MudTabPanel>
                }
            </MudTabs>
        }
	</MudItem>
</MudGrid>

@code {
    [CascadingParameter(Name="AppLayout")]
    public AppLayout AppLayout { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            AppLayout.SetTitle(LocalizationService.GetString("Group"));
            groupManager.GroupMemberChanged += OnGroupMemberChanged;
        }
    }

    public LoadoutItem[] parentItems(LoadoutItem[] loadout)
    {
        LoadoutItem defaultInventory = loadout.Where(i => i._tpl == "55d7217a4bdc2d86028b456d").First();
        LoadoutItem pocketInventory = loadout.Where(i => i._tpl == "627a4e6b255f7527fb05a0f6" || i._tpl == "557ffd194bdc2d28148b457f").FirstOrDefault();
        return loadout.Where(i => (i.parentId == defaultInventory._id || i.parentId == pocketInventory?._id) && i._id != pocketInventory?._id).ToArray();
    }

    // React to GroupManager update events
    public void OnGroupMemberChanged(object? sender, GroupMemberChangedArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

	public void Dispose()
	{
	}

}
